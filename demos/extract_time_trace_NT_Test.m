%% Add path
addpath('../../neuRoi')
%% Clear variables
clear all
close all
%%
% Step01 Load experiment configuration from file
%rootPaths = load('../../paths/rootPaths.mat');
expName = 'Nesibe-test-f1';
resultDir = '\\tungsten-nas.fmi.ch\tungsten\scratch\gfriedri\teminesi\neuRoi_versions\neuRoi_NT\demos\test_data\results';
expFilePath = fullfile(resultDir,sprintf('experimentConfig_%s.mat',expName));
    foo = load(expFilePath);
myexp = foo.myexp;
disp(myexp.expInfo)
%% Step02 (optional) Specify options for opening a trial
myexp.roiDir = myexp.getDefaultDir('roi');

myexp.loadFileType = 'binned';
myexp.trialOptionRaw = struct('process',true,...
                              'noSignalWindow',[1 6],...
                              'intensityOffset',-30);
                          
myexp.trialOptionBinned = struct('process',false,...
                                 'noSignalWindow',[],...
                                 'intensityOffset',-10);

myexp.responseOption = struct('offset',-10,...
                        'fZeroWindow',[8 13],...
                        'responseWindow',[17 30]);
myexp.responseMaxOption = struct('offset',-10,...
                           'fZeroWindow',[3 5],...
                           'slidingWindowSize',5);
myexp.mapsAfterLoading = {'response','responseMax'};
% myexp.mapsAfterLoading = {};

myexp.alignToTemplate = false;

%% Calculate red channel images if not done before 

anatomyDataPath = myexp.rawDataDir;
anatomyDataFile = {'NT0012_JHG6_C2_lOB_anatomy_002_.tif'};               
anatomyRedDir = strcat(resultDir,'\anatomyRed')

binParam.shrinkFactors = [1, 1, 375];
binParam.trialOption = struct('process',true,'noSignalWindow',[1 4]);
binParam.depth = 8;
for planeNum=1:myexp.expInfo.nPlane
batch.binMovieAnatomyBatch(binParam,anatomyRedDir,planeNum,myexp.expInfo.nPlane,anatomyDataPath,anatomyDataFile);
end

%% If red anatomy calculated before: Name of the anatomy image

anatomyDataFile='NT0012_JHG6_C2_lOB_anatomy_002_.tif';

%%  Step03 Open neuRoi GUI
myexp.planeNum =4;
myexp.mapsAfterLoading = {'response'};
mycon = NrController(myexp);

%% Add local correlation (optional)
mapType = 'localCorrelation';
mapOption = struct('tileSize',32);
trial = myexp.getCurrentTrial();
trial.calculateAndAddNewMap(mapType,mapOption);
%% Load the 2nd channel anatomy
mapFilePath = strcat(myexp.resultDir,'\anatomyRed\plane0',num2str(myexp.planeNum),'\binned_x1y1z375_',anatomyDataFile);
trial = myexp.getCurrentTrial();
trial.importMap(mapFilePath);

%% Remove very small ROIs generated by false clicking
%% Delete point ROIs
%% Delete ROIs with only one point
% Get current trial
trial = myexp.getCurrentTrial();
roiArray = trial.roiArray;
deleteTagArray = {};
for k = 1:length(roiArray)
    roi = roiArray(k);
    if size(roi.position,1)<5
        deleteTagArray{end+1} = roi.tag;
    end
end
% Delete point ROIs
for k=1:length(deleteTagArray)
    tag = deleteTagArray{k};
    trial.deleteRoi(tag);
end
%% Step04 Extract time trace with template ROI in all trials
% Apply template ROI map and correct ROIs in each trial
% If you accidentally closed the GUI, the following code might
% throw an error. In that case, just run Step01, then continue with
% Step04

for planeNum = 1:4
myexp.alignToTemplate = false;
myexp.trialOptionRaw = struct('process',true,...
                              'noSignalWindow',[1 6]);

fileIdxList = 1:24; %24 is the number of trials 
%planeNum = myexp.planeNum;
planeString = NrModel.getPlaneString(planeNum);

prefix = '';
appendix = '';

load(strcat(resultDir,'\BUnwarpj\','plane0',num2str(planeNum),'\',strcat(prefix,'Rois',appendix,'.mat')));
roiFileList=squeeze(struct2cell(RoiArray))';
plotTrace = true;
myexp.extractTimeTraceBatch(fileIdxList, ...
                            roiFileList,planeNum, ...
                            plotTrace);
end
